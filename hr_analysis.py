# -*- coding: utf-8 -*-
"""HR Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KwBSEBtnncG0JFa5mQ8M3iSe6MYF-ZE_

# HR Analytics Project

For this project, we will be using Python to analyze a CSV file named "HR-Employee-Attrition". It's important to note that I do not know how data was sourced, but it was provided by Meri Skill  to interns for visualization projects.

The dataset we will be working with contains information related to employee attrition and other HR metrics.

‚ö†Ô∏è **NOTE that you are required to complete this challenge to be able to get access to my already completed project file. I have added a file to autograde your work, if you pass, you will be given a link to my completed project file. But if you do not pass, the areas that you need to revisit will be listed so that you can tweak them**

**Although if you are able to pass the challenge, you won't be needing my own completed project file as you would already have yours.**

**But that's the whole idea üòÇüòÇüòÇüòÇ**

### Instructions

- **Do not add or remove cells in this notebook. Do not edit or remove the `### START FUNCTION` or `### END FUNCTION` comments. Do not add any code outside of the functions you are required to edit. Doing any of this will lead to a mark of 0%!**

- Answer the questions according to the specifications provided.

- Use the given cell in each question to see if your function matches the expected outputs.

### Here's The Plan
"""

"""
Import necessary libraries for the project.

Libraries:
- pandas: data manipulation and analysis
- numpy: mathematical functions on arrays
- matplotlib.pyplot: plotting library for creating static, animated, and interactive visualizations
- seaborn: data visualization library based on matplotlib for statistical graphics
- plotly.express: high-level interface for creating expressive, interactive graphics
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

"""
Reads the HR-Employee-Attrition.csv file into a pandas DataFrame.

Parameters:
- "HR-Employee-Attrition.csv": file path of the CSV file to be read

Returns:
- df: pandas DataFrame containing the data from the CSV file
"""
df = pd.read_csv("HR-Employee-Attrition.csv")

df

"""
Display the first few rows of the DataFrame to examine the data.

Returns:
- DataFrame: the first few rows of the DataFrame
"""
df.head()

"""
Display the last few rows of the DataFrame to examine the data.

Returns:
- DataFrame: the last few rows of the DataFrame
"""
df.tail()

"""
Return the shape of the DataFrame, indicating the number of rows and columns.

Returns:
- tuple: the number of rows and columns in the DataFrame
"""
df.shape

"""
Print a concise summary of the DataFrame, including the index dtype and column dtypes, non-null values, and memory usage.

Returns:
- None
"""
df.info()

"""
Count the number of missing values (NaN) in each column of the DataFrame.

Returns:
- Series: a Series containing the number of missing values in each column
"""
df.isnull().sum()

"""
Remove duplicate rows from the DataFrame.

Returns:
- DataFrame: a DataFrame with duplicate rows removed
"""
df = df.drop_duplicates()

"""
Remove rows with missing values (NaN) from the DataFrame.

Returns:
- DataFrame: a DataFrame with rows containing NaN values removed
"""
df = df.dropna()

"""
Returns:
- df: pandas DataFrame containing the data from the CSV file
"""
df

"""
Calculate the correlation matrix for numeric variables in the DataFrame and plot it as a heatmap.

Parameters:
- df (DataFrame): The input DataFrame containing numeric variables.

Returns:
- None
"""
# Calculate the correlation matrix for numeric variables in the DataFrame
corr_matrix = df.corr()

# Create a new figure for the heatmap with a specified size
plt.figure(figsize=(20,10))

# Plot the correlation matrix as a heatmap, with annotations and using the 'coolwarm' color map
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')

# Add a title to the plot
plt.title('Correlation Map For Numeric Variables')

# Display the plot
plt.show()

"""
Create a countplot to show the distribution of 'OverTime' values in the DataFrame.

Parameters:
- df (DataFrame): The input DataFrame containing the 'OverTime' column.

Returns:
- None
"""
# Create a countplot to show the distribution of 'OverTime' values
sns.countplot(data=df, x='OverTime')

# Add a title to the plot
plt.title("Over Time")

# Display the plot
plt.show()

"""
Create a countplot to show the distribution of 'MaritalStatus' values in the DataFrame.

Parameters:
- df (DataFrame): The input DataFrame containing the 'MaritalStatus' column.

Returns:
- None
"""
# Create a countplot to show the distribution of 'MaritalStatus' values
sns.countplot(data=df, x='MaritalStatus')

# Add a title to the plot
plt.title('Marital Status')

# Display the plot
plt.show()

"""
Create a countplot to show the distribution of 'JobRole' values in the DataFrame.

Parameters:
- df (DataFrame): The input DataFrame containing the 'JobRole' column.

Returns:
- None
"""
# Create a new figure with a specified size
plt.figure(figsize=(10,5))

# Create a countplot to show the distribution of 'JobRole' values
sns.countplot(data=df, y='JobRole')

# Add a title to the plot
plt.title("Job Title")

# Display the plot
plt.show()

"""
Create a countplot to show the distribution of 'Gender' values in the DataFrame.

Parameters:
- df (DataFrame): The input DataFrame containing the 'Gender' column.

Returns:
- None
"""
# Create a countplot to show the distribution of 'Gender' values
sns.countplot(data=df, x='Gender')

# Add a title to the plot
plt.title("Gender")

# Display the plot
plt.show()

"""
Create a countplot to show the distribution of 'EducationField' values in the DataFrame.

Parameters:
- df (DataFrame): The input DataFrame containing the 'EducationField' column.

Returns:
- None
"""
# Create a new figure with a specified size
plt.figure(figsize=(10,5))

# Create a countplot to show the distribution of 'EducationField' values
sns.countplot(data=df, y='EducationField')

# Add a title to the plot
plt.title("Education Field")

# Display the plot
plt.show()

"""
Create a countplot to show the distribution of 'Department' values in the DataFrame.

Parameters:
- df (DataFrame): The input DataFrame containing the 'Department' column.

Returns:
- None
"""
# Create a countplot to show the distribution of 'Department' values
sns.countplot(data=df, x='Department')

# Display the plot
plt.show()

"""
Create a countplot to show the distribution of 'BusinessTravel' values in the DataFrame.

Parameters:
- df (DataFrame): The input DataFrame containing the 'BusinessTravel' column.

Returns:
- None
"""
# Create a countplot to show the distribution of 'BusinessTravel' values
sns.countplot(data=df, x='BusinessTravel')

# Add a title to the plot
plt.title('Business Travel')

# Display the plot
plt.show()

"""
Create a boxplot to show the relationship between 'OverTime' and 'Age' in the DataFrame.

Parameters:
- x (str): The column name for the x-axis ('OverTime').
- y (str): The column name for the y-axis ('Age').
- data (DataFrame): The input DataFrame containing the 'OverTime' and 'Age' columns.

Returns:
- None
"""
# Create a boxplot to show the relationship between 'OverTime' and 'Age'
sns.boxplot(x='OverTime', y='Age', data=df)

# Add a title to the plot
plt.title('Relationship Between OverTime and Age')

# Display the plot
plt.show()

"""
Create a histogram to show the distribution of 'TotalWorkingYears' values in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'TotalWorkingYears' column.
- x (str): The column name for the x-axis ('TotalWorkingYears').
- bins (int): The number of bins for the histogram.
- kde (bool): Whether to plot a kernel density estimate (KDE) over the histogram.

Returns:
- None
"""
# Create a histogram to show the distribution of 'TotalWorkingYears' values
sns.histplot(data=df, x="TotalWorkingYears", bins=10, kde=True)

# Add a title to the plot
plt.title("Total Working Years")

# Display the plot
plt.show()

"""
Create a histogram to show the distribution of 'Education' values in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'Education' column.
- x (str): The column name for the x-axis ('Education').
- bins (int): The number of bins for the histogram.
- kde (bool): Whether to plot a kernel density estimate (KDE) over the histogram.

Returns:
- None
"""
# Create a histogram to show the distribution of 'Education' values
sns.histplot(data=df, x="Education", bins=10, kde=True)

# Add a title to the plot
plt.title("Education Level")

# Display the plot
plt.show()

"""
Create a histogram to show the distribution of 'NumCompaniesWorked' values in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'NumCompaniesWorked' column.
- x (str): The column name for the x-axis ('NumCompaniesWorked').
- bins (int): The number of bins for the histogram.
- kde (bool): Whether to plot a kernel density estimate (KDE) over the histogram.

Returns:
- None
"""
# Create a histogram to show the distribution of 'NumCompaniesWorked' values
sns.histplot(data=df, x="NumCompaniesWorked", bins=10, kde=True)

# Add a title to the plot
plt.title("Number Of Companies Worked")

# Display the plot
plt.show()

"""
Create a histogram to show the distribution of 'DistanceFromHome' values in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'DistanceFromHome' column.
- x (str): The column name for the x-axis ('DistanceFromHome').
- bins (int): The number of bins for the histogram.
- kde (bool): Whether to plot a kernel density estimate (KDE) over the histogram.

Returns:
- None
"""
# Create a histogram to show the distribution of 'DistanceFromHome' values
sns.histplot(data=df, x="DistanceFromHome", bins=10, kde=True)

# Add a title to the plot
plt.title("Distance From Home")

# Display the plot
plt.show()

"""# Salary Analysis"""

"""
Create a histogram to show the distribution of 'MonthlyIncome' values in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'MonthlyIncome' column.
- x (str): The column name for the x-axis ('MonthlyIncome').
- bins (int): The number of bins for the histogram.
- kde (bool): Whether to plot a kernel density estimate (KDE) over the histogram.

Returns:
- None
"""
# Create a histogram to show the distribution of 'MonthlyIncome' values
sns.histplot(data=df, x="MonthlyIncome", bins=10, kde=True)

# Add a title to the plot
plt.title("Monthly Income Distribution")

# Display the plot
plt.show()

"""
Create a boxplot to show the distribution of 'MonthlyIncome' values by 'JobRole' in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'MonthlyIncome' and 'JobRole' columns.
- x (str): The column name for the x-axis ('JobRole').
- y (str): The column name for the y-axis ('MonthlyIncome').
- figsize (tuple): The size of the figure (width, height) in inches.
- title (str): The title of the plot.
- rotation (int): The rotation angle of the x-axis labels.

Returns:
- None
"""
# Create a new figure with a specified size
plt.figure(figsize=(10,5))

# Create a boxplot to show the distribution of 'MonthlyIncome' values by 'JobRole'
sns.boxplot(x="JobRole", y="MonthlyIncome", data=df)

# Add a title to the plot
plt.title("Salary by Job Role")

# Rotate the x-axis labels for better readability
plt.xticks(rotation=90)

# Display the plot
plt.show()

"""# Employee Satisfaction and Performance"""

"""
Create a histogram to show the distribution of 'JobSatisfaction' values in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'JobSatisfaction' column.
- x (str): The column name for the x-axis ('JobSatisfaction').
- bins (int): The number of bins for the histogram.
- kde (bool): Whether to plot a kernel density estimate (KDE) over the histogram.

Returns:
- None
"""
# Create a histogram to show the distribution of 'JobSatisfaction' values
sns.histplot(data=df, x="JobSatisfaction", bins=10, kde=True)

# Add a title to the plot
plt.title("Job Satisfaction Distribution")

# Display the plot
plt.show()

"""
Create a histogram to show the distribution of 'PerformanceRating' values in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'PerformanceRating' column.
- x (str): The column name for the x-axis ('PerformanceRating').
- bins (int): The number of bins for the histogram.
- kde (bool): Whether to plot a kernel density estimate (KDE) over the histogram.

Returns:
- None
"""
# Create a histogram to show the distribution of 'PerformanceRating' values
sns.histplot(data=df, x="PerformanceRating", bins=10, kde=True)

# Add a title to the plot
plt.title("Performance Rating Distribution")

# Display the plot
plt.show()

"""
Create a histogram to show the distribution of 'YearsAtCompany' values in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'YearsAtCompany' column.
- x (str): The column name for the x-axis ('YearsAtCompany').
- bins (int): The number of bins for the histogram.
- kde (bool): Whether to plot a kernel density estimate (KDE) over the histogram.

Returns:
- None
"""
# Create a histogram to show the distribution of 'YearsAtCompany' values
sns.histplot(data=df, x="YearsAtCompany", bins=10, kde=True)

# Add a title to the plot
plt.title("Employee Tenure Distribution")

# Display the plot
plt.show()

"""
Create a boxplot to show the distribution of 'Age' values by 'Department' in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'Age' and 'Department' columns.
- x (str): The column name for the x-axis ('Department').
- y (str): The column name for the y-axis ('Age').
- figsize (tuple): The size of the figure (width, height) in inches.
- title (str): The title of the plot.

Returns:
- None
"""
# Create a new figure with a specified size
plt.figure(figsize=(10,6))

# Create a boxplot to show the distribution of 'Age' values by 'Department'
sns.boxplot(x='Department', y='Age', data=df)

# Add a title to the plot
plt.title('Age Distribution by Department')

# Display the plot
plt.show()

"""
Create a countplot to show the distribution of 'Attrition' values by 'JobRole' in the DataFrame.

Parameters:
- data (DataFrame): The input DataFrame containing the 'Attrition' and 'JobRole' columns.
- x (str): The column name for the x-axis ('JobRole').
- hue (str): The column name for grouping by ('Attrition').
- figsize (tuple): The size of the figure (width, height) in inches.
- rotation (int): The rotation angle of the x-axis labels.
- title (str): The title of the plot.

Returns:
- None
"""
# Create a new figure with a specified size
plt.figure(figsize=(10,5))

# Create a countplot to show the distribution of 'Attrition' values by 'JobRole'
sns.countplot(data=df, x='JobRole', hue='Attrition')

# Rotate the x-axis labels for better readability
plt.xticks(rotation=90)

# Add a title to the plot
plt.title("Attrition by Job Role")

# Display the plot
plt.show()